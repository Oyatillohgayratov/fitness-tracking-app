// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package storage

import (
	"context"
	"time"

	"github.com/sqlc-dev/pqtype"
)

const createUser = `-- name: CreateUser :one
insert into users (username, password_hash, email, profile)
values ($1, $2, $3, $4)
returning id, username, email, password_hash, profile
`

type CreateUserParams struct {
	Username     string
	PasswordHash string
	Email        string
	Profile      pqtype.NullRawMessage
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.PasswordHash,
		arg.Email,
		arg.Profile,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Profile,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
delete from users
where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getPasswordResetToken = `-- name: GetPasswordResetToken :one
select id, user_id, token, expiration from password_reset_tokens
where token = $1 limit 1
`

func (q *Queries) GetPasswordResetToken(ctx context.Context, token string) (PasswordResetToken, error) {
	row := q.db.QueryRowContext(ctx, getPasswordResetToken, token)
	var i PasswordResetToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Expiration,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
select id, username, email, password_hash, profile from users
where id = $1 limit 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Profile,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, username, email, password_hash, profile from users
where email = $1 limit 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.Profile,
	)
	return i, err
}

const listUser = `-- name: ListUser :many
select id, username, email, profile
from users
order by username
`

type ListUserRow struct {
	ID       int32
	Username string
	Email    string
	Profile  pqtype.NullRawMessage
}

func (q *Queries) ListUser(ctx context.Context) ([]ListUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listUser)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUserRow
	for rows.Next() {
		var i ListUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Profile,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const savePasswordResetToken = `-- name: SavePasswordResetToken :exec
insert into password_reset_tokens (user_id, token, expiration)
values ($1, $2, $3)
`

type SavePasswordResetTokenParams struct {
	UserID     int32
	Token      string
	Expiration time.Time
}

func (q *Queries) SavePasswordResetToken(ctx context.Context, arg SavePasswordResetTokenParams) error {
	_, err := q.db.ExecContext(ctx, savePasswordResetToken, arg.UserID, arg.Token, arg.Expiration)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
update users
set password_hash = $2
where id = $1
`

type UpdatePasswordParams struct {
	ID           int32
	PasswordHash string
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.ID, arg.PasswordHash)
	return err
}

const updateUser = `-- name: UpdateUser :exec
update users
set username = $2, email = $3, profile = $4
where id = $1
`

type UpdateUserParams struct {
	ID       int32
	Username string
	Email    string
	Profile  pqtype.NullRawMessage
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Profile,
	)
	return err
}
